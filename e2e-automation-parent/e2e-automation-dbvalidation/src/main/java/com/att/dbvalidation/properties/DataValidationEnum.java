package com.att.dbvalidation.properties;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.Set;


public enum DataValidationEnum {
	RELEASE_CURRENT,
	RELEASE_FUTURE,

	//CCR DB
	CCR_CURRENT_DRIVER,
	CCR_CURRENT_USERNAME,
	CCR_CURRENT_PASSWORD,

	CCR_FUTURE_DRIVER,
	CCR_FUTURE_USERNAME,
	CCR_FUTURE_PASSWORD,

	//MPS DB
	MPS_CURRENT_DRIVER,
	MPS_CURRENT_USERNAME,
	MPS_CURRENT_PASSWORD,

	MPS_FUTURE_DRIVER,
	MPS_FUTURE_USERNAME,
	MPS_FUTURE_PASSWORD,

	//Enabler Zone 1 DB
	ENABLER_ZONE1_CURRENT_DRIVER,
	ENABLER_ZONE1_CURRENT_USERNAME,
	ENABLER_ZONE1_CURRENT_PASSWORD,

	ENABLER_ZONE1_FUTURE_DRIVER,
	ENABLER_ZONE1_FUTURE_USERNAME,
	ENABLER_ZONE1_FUTURE_PASSWORD,

	//Enabler Zone 2 DB
	ENABLER_ZONE2_CURRENT_DRIVER,
	ENABLER_ZONE2_CURRENT_USERNAME,
	ENABLER_ZONE2_CURRENT_PASSWORD,

	ENABLER_ZONE2_FUTURE_DRIVER,
	ENABLER_ZONE2_FUTURE_USERNAME,
	ENABLER_ZONE2_FUTURE_PASSWORD,

	//Enabler Zone 3 DB
	ENABLER_ZONE3_CURRENT_DRIVER,
	ENABLER_ZONE3_CURRENT_USERNAME,
	ENABLER_ZONE3_CURRENT_PASSWORD,

	ENABLER_ZONE3_FUTURE_DRIVER,
	ENABLER_ZONE3_FUTURE_USERNAME,
	ENABLER_ZONE3_FUTURE_PASSWORD,

	//OMS Seg1 DB
	OMS_SEG1_CURRENT_DRIVER,
	OMS_SEG1_CURRENT_USERNAME,
	OMS_SEG1_CURRENT_PASSWORD,

	OMS_SEG1_FUTURE_DRIVER,
	OMS_SEG1_FUTURE_USERNAME,
	OMS_SEG1_FUTURE_PASSWORD,

	//OMS Seg2 DB
	OMS_SEG2_CURRENT_DRIVER,
	OMS_SEG2_CURRENT_USERNAME,
	OMS_SEG2_CURRENT_PASSWORD,

	OMS_SEG2_FUTURE_DRIVER,
	OMS_SEG2_FUTURE_USERNAME,
	OMS_SEG2_FUTURE_PASSWORD,

	//OMS Seg3 DB
	OMS_SEG3_CURRENT_DRIVER,
	OMS_SEG3_CURRENT_USERNAME,
	OMS_SEG3_CURRENT_PASSWORD,

	OMS_SEG3_FUTURE_DRIVER,
	OMS_SEG3_FUTURE_USERNAME,
	OMS_SEG3_FUTURE_PASSWORD,

	//Batch DB
	BATCH_CURRENT_DRIVER,
	BATCH_CURRENT_USERNAME,
	BATCH_CURRENT_PASSWORD,

	BATCH_FUTURE_DRIVER,
	BATCH_FUTURE_USERNAME,
	BATCH_FUTURE_PASSWORD,

	//BDS DB
	BDS_CURRENT_DRIVER,
	BDS_CURRENT_USERNAME,
	BDS_CURRENT_PASSWORD,

	BDS_FUTURE_DRIVER,
	BDS_FUTURE_USERNAME,
	BDS_FUTURE_PASSWORD,
	
	//Enabler DLS DB
	ENABLER_DLS_CURRENT_DRIVER,
	ENABLER_DLS_CURRENT_USERNAME,
	ENABLER_DLS_CURRENT_PASSWORD,

	ENABLER_DLS_FUTURE_DRIVER,
	ENABLER_DLS_FUTURE_USERNAME,
	ENABLER_DLS_FUTURE_PASSWORD,

	//Enabler GAC DB
	ENABLER_GAC_CURRENT_DRIVER,
	ENABLER_GAC_CURRENT_USERNAME,
	ENABLER_GAC_CURRENT_PASSWORD,

	ENABLER_GAC_FUTURE_DRIVER,
	ENABLER_GAC_FUTURE_USERNAME,
	ENABLER_GAC_FUTURE_PASSWORD,

	//Enabler MWR DB
	ENABLER_MWR_CURRENT_DRIVER, 
	ENABLER_MWR_CURRENT_USERNAME, 
	ENABLER_MWR_CURRENT_PASSWORD, 

	ENABLER_MWR_FUTURE_DRIVER, 
	ENABLER_MWR_FUTURE_USERNAME,
	ENABLER_MWR_FUTURE_PASSWORD,

	//Enabler NBI DB
	ENABLER_NBI_CURRENT_DRIVER,
	ENABLER_NBI_CURRENT_USERNAME,
	ENABLER_NBI_CURRENT_PASSWORD,

	ENABLER_NBI_FUTURE_DRIVER,
	ENABLER_NBI_FUTURE_USERNAME,
	ENABLER_NBI_FUTURE_PASSWORD,

	//Enabler PAC DB
	ENABLER_PAC_CURRENT_DRIVER,
	ENABLER_PAC_CURRENT_USERNAME,
	ENABLER_PAC_CURRENT_PASSWORD,

	ENABLER_PAC_FUTURE_DRIVER,
	ENABLER_PAC_FUTURE_USERNAME, 
	ENABLER_PAC_FUTURE_PASSWORD, 

	//TLG PAC DB
	TLG_PAC_CURRENT_DRIVER, 
	TLG_PAC_CURRENT_USERNAME, 
	TLG_PAC_CURRENT_PASSWORD, 

	TLG_PAC_FUTURE_DRIVER, 
	TLG_PAC_FUTURE_USERNAME, 
	TLG_PAC_FUTURE_PASSWORD, 

	//TLG DLS DB
	TLG_DLS_CURRENT_DRIVER, 
	TLG_DLS_CURRENT_USERNAME, 
	TLG_DLS_CURRENT_PASSWORD, 

	TLG_DLS_FUTURE_DRIVER, 
	TLG_DLS_FUTURE_USERNAME, 
	TLG_DLS_FUTURE_PASSWORD, 

	//TLG SAN DB
	TLG_SAN_CURRENT_DRIVER, 
	TLG_SAN_CURRENT_USERNAME, 
	TLG_SAN_CURRENT_PASSWORD, 

	TLG_SAN_FUTURE_DRIVER, 
	TLG_SAN_FUTURE_USERNAME, 
	TLG_SAN_FUTURE_PASSWORD, 

	//TLG MWR DB
	TLG_MWR_CURRENT_DRIVER, 
	TLG_MWR_CURRENT_USERNAME, 
	TLG_MWR_CURRENT_PASSWORD, 

	TLG_MWR_FUTURE_DRIVER, 
	TLG_MWR_FUTURE_USERNAME, 
	TLG_MWR_FUTURE_PASSWORD, 

	//TLG GAC DB
	TLG_GAC_CURRENT_DRIVER, 
	TLG_GAC_CURRENT_USERNAME, 
	TLG_GAC_CURRENT_PASSWORD, 

	TLG_GAC_FUTURE_DRIVER, 
	TLG_GAC_FUTURE_USERNAME, 
	TLG_GAC_FUTURE_PASSWORD, 

	//TLG GLR DB
	TLG_GLR_CURRENT_DRIVER, 
	TLG_GLR_CURRENT_USERNAME, 
	TLG_GLR_CURRENT_PASSWORD, 

	TLG_GLR_FUTURE_DRIVER, 
	TLG_GLR_FUTURE_USERNAME, 
	TLG_GLR_FUTURE_PASSWORD, 

	//TLG NBI DB
	TLG_NBI_CURRENT_DRIVER, 
	TLG_NBI_CURRENT_USERNAME, 
	TLG_NBI_CURRENT_PASSWORD, 

	TLG_NBI_FUTURE_DRIVER, 
	TLG_NBI_FUTURE_USERNAME, 
	TLG_NBI_FUTURE_PASSWORD, 

	//TLG NWS DB
	TLG_NWS_CURRENT_DRIVER, 
	TLG_NWS_CURRENT_USERNAME, 
	TLG_NWS_CURRENT_PASSWORD, 

	TLG_NWS_FUTURE_DRIVER, 
	TLG_NWS_FUTURE_USERNAME,
	TLG_NWS_FUTURE_PASSWORD,		
	
	OMS_UVERSE_QUERY_OMS_CHECK_BAN_STATUS,
	OMS_UVERSE_QUERY_OMS_CHECK_VALIDATION_TBBAN,
	OMS_UVERSE_QUERY_OMS_CHECK_ADDRESS,
	
	OMS_TO_CCR_UVERSE_QUERY_OMS_TO_CCR_REPLICATION,
	OMS_TO_CCR_REP_CCR,
	
	ENABLER_UVERSE_QUERY_ENABLER_CHECK_STATUS_PRODUCT,
	ENABLER_UVERSE_QUERY_ENABLER_CHECK_CYCLE,
	ENABLER_UVERSE_QUERY_ENABLER_CHECK_ACCOUNT_TYPE,
	ENABLER_UVERSE_QUERY_ENABLER_CHECK_PLAN_AND_SOC,
	ENABLER_UVERSE_QUERY_ENABLER_CHECK_TRB_ERRROS,
	ENABLER_CHECK_TRB_ERRROS_1,
	ENABLER_CHECK_TRB_ERRROS_2,
	ENABLER_UVERSE_QUERY_ENABLER_CHECK_USAGE,

	MPS_UVERSE_QUERY_MPS_CHECK_SERVICE_ID,
	MPS_UVERSE_QUERY_MPS_CHECK_GHOST_ID_GENERATED,

	MPS_TO_CCR_REP_UVERSE_QUERY_MPS_TO_CCR_CHECK_PARENT_MEMBERID ,
	MPS_TO_CCR_REP_UVERSE_QUERY_MPS_TO_CCR_CHECK_MAIN_MEMBERID,
	MPS_TO_CCR_REP_UVERSE_QUERY_MPS_TO_CCR_CHECK_NAME_AND_ADDRESS,

	CCR_UVERSE_QUERY_CCR_PKEY_FOR_WIRELESS_ID_MIGRATION,
	CCR_UVERSE_QUERY_CCR_BAN_IN_CCR_ACCOUNT_WIRELINE_CON_TABLE,
	CCR_UVERSE_QUERY_CCR_CHECK_VIDEO_BILL_IND,
	CCR_UVERSE_QUERY_CCR_FIND_WLS_BAN_FOR_CB_UVERSE,
	CCR_UVERSE_QUERY_CCR_CHECK_WLL_BAN_REGISTRATION,
	CCR_UVERSE_QUERY_CCR_CHECK_BRN_IND,

	BATCH_UVERSE_QUERY_BATCH_CHECK_INDEXING_FOR_SA_UVERSE_WLL,
	BATCH_UVERSE_QUERY_BATCH_CHECK_COMBINED_BILLING_FOR_CB_UVERSE,
	BATCH_UVERSE_QUERY_BATCH_HSIA_USAGE,
	BATCH_UVERSE_QUERY_BATCH_WLL_DATA_USAGE,
	BATCH_UVERSE_QUERY_BATCH_VOIP_USAGE,
	BATCH_VOIP_USAGE_1,
	BATCH_UVERSE_QUERY_BATCH_IPTV_USAGE,

	BDS_UVERSE_QUERY_BDS_CHECK_BILLING_ID,
	BDS_UVERSE_QUERY_BDS_CHECK_BILL_PDF,

	SLID_MPS_MEMBERNAME,
	SLID_UVERSE_QUERY_SLID_MPS_MEMBER_NAME_AND_ITS_ASSOCIATE_BANS,
	SLID_UVERSE_QUERY_SLID_CHECK_SLID_FLOWN_TO_CCR,
	
	
	//Unified Query
	CCR_UNIFIED_QUERY_CCR_DTV_PACKAGE_DETAILS,
	CCR_UNIFIED_QUERY_CCR_DTV_EQUIPMENT_DETAILS,
	CCR_UNIFIED_QUERY_CCR_TO_GET_BILLING_ADDRESS_AND_CUSTOMER_NAME_OF_SADTV_NONSYN ,
	CCR_UNIFIED_QUERY_CCR_WLS_BAN_STATUS_AND_ACTIVATION_DATE,

	ENABLER_UNIFIED_QUERY_ENABLER_TO_GET_CONVERGED_INDICATOR,
	ENABLER_UNIFIED_QUERY_ENABLER_DTV_CHARGES,
	ENABLER_DTV_CHARGES,
	ENABLER_UNIFIED_QUERY_ENABLER_SYNERGY_DTV_USAGE,
	ENABLER_UNIFIED_QUERY_ENABLER_CHECK_BILLED_UNBILLED_USAGE,
	ENABLER_UNIFIED_QUERY_ENABLER_BAN_ACTIVATION_DATE,
	
	PCA_UNIFIED_QUERY_IN_CCR_LEGACY_DTV_BAN,
	PCA_UNIFIED_QUERY_UHV_ADDRESS_VALIDATION,
	PCA_UNIFIED_QUERY_CCR_UVERSE_WLL_WLS,

	CONVERTED_DTV_UNIFIED_QUERY_CONVERTED_DTV_BILL_CYCLE_AND_LEGACY_DTV_ASSOCIATION,
	CONVERTED_DTV_UNIFIED_QUERY_CONVERTED_DTV_CRM_TO_CCR_REP,
	CONVERTED_DTV_UNIFIED_QUERY_CONVERTED_DTV_ENABLER_TO_CCR_REP,
	//Wireless Query
	
	WLS_FIND_CTN,
	WLS_FIND_MARKET_CODE,
	
	CCR_WLS_QUERY_CCR_CHECK_CTN_IN_CCR,
	CCR_WLS_QUERY_CCR_CHECK_BAN_IN_CCR,
	CCR_WLS_QUERY_CCR_CHECK_SLID_MEMBER_ID,
	CCR_CHECK_SLID_MEMBER_ID,
	CCR_WLS_QUERY_CCR_CHECK_ACCOUNT_LINKED_TO_PLENTI_ID,
	CCR_CHECK_ACCOUNT_LINKED_TO_PLENTI_ID,

	MPS_WLS_QUERY_MPS_CHECK_BAN_FLOWN_IN_MPS_DB,
	MPS_WLS_QUERY_MPS_CHECK_SLID_FLOWN_IN_MPS_DB,
	MPS_WLS_QUERY_MPS_CHECK_ACCOUNT_LINKED_TO_PLENTI_ID,
	MPS_CHECK_ACCOUNT_LINKED_TO_PLENTI_ID,
	MPS_WLS_QUERY_MPS_CHECK_PLENTI_ID_LINKED_TO_ANY_ACCOUNT,
	MPS_WLS_QUERY_CHECK_DESIGNATED_MAIN_CTN,
	
	ENABLER_WLS_QUERY_ENABLER_CHECK_CTN_AND_SOC_FLOWN,
	ENABLER_WLS_QUERY_ENABLER_GET_IMSI_VALUE,
	ENABLER_WLS_QUERY_ENABLER_CHECK_DATA_USAGE,
	
	TLG_WLS_QUERY_TLG_GET_SEQUENCE_NO,
	TLG_WLS_QUERY_TLG_CHECK_DEVICE_ADDED_IN_CTN,
	TLG_WLS_QUERY_TLG_CHECK_EMAIL_EFFECTIVITY,
	
	BATCH_WLS_QUERY_BATCH_CHECK_INDEXING,
	BATCH_WLS_QUERY_BATCH_CHECK_USAGE,
	
	//Login
	REDIRECT_URL,
	REDIRECT_URL_DEV,
	REDIRECT_URL_PROD,
	VERSION,
	ATTID,
	FIRST_NAME,
	LAST_NAME;
	
	
	
    private static final String PATH ;
    private static Properties properties;
    private String value;
    private static Long previousTimeStamp=0l;
    
    

	static
	{
		if(System.getProperty("os.name").toLowerCase().contains("win"))
		{
			PATH  ="C:\\E2EAutomation_Details\\e2eAutomation\\sample.properties";
		}else
		{
			PATH  = "/opt/app/stubdomains/component/LMR/sample.properties";
		}
	}
   
   /*private void init() {
        if (properties == null) {
        	System.out.println("inside Properties");
            properties = new Properties();
            try {
            	 FileInputStream in = new FileInputStream(PATH);
            	properties.load(in );
            }
            catch (Exception e) {
              
           //     System.exit(1);
            }
        }
        value = (String) properties.get(this.toString());
    }*/
    private void init() {
    	
    	File file=new File(PATH);
        if (properties == null) {   
        	System.out.println("Inside int if");
        	properties = new Properties();
        	previousTimeStamp= file.lastModified();
            try {
            	FileInputStream in = new FileInputStream(PATH);
                properties.load(in );
    		}
            catch (Exception e) {
            }
        }
        else{
        	if (file.lastModified()!=previousTimeStamp) {
        		System.out.println("File modified");
        		FileInputStream in = null;
				try {
					in = new FileInputStream(PATH);
					properties.load(in );
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
        }
        value = (String) properties.get(this.toString());
    }

    public String getValue() {
    	init();
    	return value;
    }
    
    
    public static List<String> getBEListFromPropertis(String discriminator,int pos) {	
    	return filterProperties(discriminator,pos);       
    }
    
	private static List<String> filterProperties(String discriminator,int pos) {
		properties = new Properties();
		List<String> backends=new ArrayList<>();
        try {
        	 FileInputStream in = new FileInputStream(PATH);
        	
            properties.load(in );
            Set<String> keys = properties.stringPropertyNames();
            for (String key : keys) {
             if(key.contains(discriminator))
             {            	          	 
            	 backends.add(key.split(discriminator)[pos]);          			 
             }
            }
            Collections.sort(backends);
        }
        catch (Exception e) {
        }
        return backends;
	}	
	
	public static String getEnumValueFromString( String val) {

		String value=null;
		String enumName = getEnumName(val);
		if(enumName!=null) {
			DataValidationEnum e= Enum.valueOf(DataValidationEnum.class, enumName);
			value= e.getValue();
		}
		return value;
	}
	
	public static DataValidationEnum getEnumFromString( String enumNameInString) {

		String enumName=null;
		DataValidationEnum c=null;
		enumName = getEnumName(enumNameInString);
		if(enumName!=null) {
			c= Enum.valueOf(DataValidationEnum.class, enumName);
		}
		return c;
	}

	private static String getEnumName(String enumNameInString) {
		
		String enumName=null;
		Object[] arr = DataValidationEnum.class.getEnumConstants();
		for (Object e : arr) {
			if (((DataValidationEnum) e).name().contains(enumNameInString)) {
				enumName=((DataValidationEnum) e).name().toString() ;
				break;
			}
		}
		return enumName;
	}
}
