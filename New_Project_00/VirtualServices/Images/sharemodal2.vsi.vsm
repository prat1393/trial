<?xml version="1.0" ?>

<VSModel name="sharemodal2.vsi" version="5">

<meta>
   <create version="8.4.0" buildNumber="8.4.0.227" author="admin" date="04/07/2018" host="HVDIVD18MIS1939" />
   <lastEdited version="8.4.0" buildNumber="8.4.0.227" author="admin" date="04/08/2018" host="HVDIVD18MIS1939" />
</meta>

<id>BEDA6E273A5411E89BE0205420524153</id>
<IsInProject>true</IsInProject>
<sig>ZWQ9NSZ0Y3Y9NSZsaXNhdj04LjQuMCAoOC40LjAuMjI3KSZub2Rlcz0zMDgyOTU0Njk=</sig>
<subprocess>false</subprocess>

<initState>
</initState>

<resultState>
</resultState>

<deletedProps>
</deletedProps>

    <Node name="Virtual HTTPS Listener 8031" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpListenStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual Service Router" > 


      <!-- Filters -->
      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.Virtual HTTPS Listener 8031.rsp</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.ws.WSSOAPProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.scriptable.ScriptableDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<updateRequestScript><![CDATA[%groovy%


import com.itko.util.ParameterList;
import com.itko.lisa.vse.stateful.protocol.ws.WSSOAPProtocolHandler;
import com.itko.util.XMLUtils;

String decodedXML = lisa_vse_request.getBodyAsString();
String operation = lisa_vse_request.getOperation();
testExec.setStateValue("op",operation);
if(operation.equals("depositMoney"))
{
ParameterList args = lisa_vse_request.getArguments();
testExec.setStateValue("dep",args.get("amount").toDouble());
}

if(operation.equals("withdrawMoney"))
{
ParameterList args = lisa_vse_request.getArguments();
testExec.setStateValue("with",args.get("amount").toDouble());
}
if( operation.equals("transferMoney") )
{
ParameterList args = lisa_vse_request.getArguments();
testExec.setStateValue("with",args.get("amount").toDouble());
}
lisa_vse_request.setBody( decodedXML  );

WSSOAPProtocolHandler wd=new WSSOAPProtocolHandler();

wd.updateRequest(lisa_vse_request);
]]></updateRequestScript>
</CustomFilterData>
      </Filter>


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If being efficient" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Most Efficient, branching to VS Image Response Selection</log>
<then>Execute script (JSR-223)</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>EFFICIENT</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<listenPort>8031</listenPort>
<bindAddress></bindAddress>
<basePath>/</basePath>
<bindOnly>false</bindOnly>
<useSSL>false</useSSL>
<sslClientAuthType>none</sslClientAuthType>
    </Node>


    <Node name="Virtual Service Router" log=""
          type="com.itko.lisa.vse.stateful.VSRouterStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Execute script (JSR-223)" > 

<onerror>abort</onerror>
<script>// This script must return either an enum entry from ExecutionMode or&#10;// a string that is the name of an enum entry.  The DYNAMIC entry may&#10;// not be returned.  It will be executed for DYNAMIC execution mode&#10;// only.&#10;import com.itko.lisa.vse.ExecutionMode;&#10;&#10;return ExecutionMode.EFFICIENT;&#10;&#10;&#10;/* other values: &#10;&#9;ExecutionMode.TRACK;&#10;&#9;ExecutionMode.STAND_IN;&#10;&#9;ExecutionMode.LIVE;&#10;&#9;ExecutionMode.FAILOVER;&#10;&#9;ExecutionMode.VALIDATION;&#10;&#9;ExecutionMode.LEARNING;&#10;*/&#10;</script>
<supportedModes>
<mode>STAND_IN</mode>
<mode>LIVE</mode>
<mode>VALIDATION</mode>
<mode>TRACK</mode>
<mode>DYNAMIC</mode>
<mode>EFFICIENT</mode>
<mode>FAILOVER</mode>
<mode>LEARNING</mode>
</supportedModes>
<liveInvocationStep>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</liveInvocationStep>
    </Node>


    <Node name="Execute script (JSR-223)" log=""
          type="com.itko.lisa.test.UserScriptNode" 
          version="1" 
          uid="BFF2AA653A5611E89BE0205420524153" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="VS Image Response Selection" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assertion name: Any Exception Then Fail checks for: true is of type: Assert on Invocation Exception.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<onerror>abort</onerror>
<language>BeanShell</language>
<copyProps>TestExecProps</copyProps>
<script>&#13;&#10;//&#13;&#10;//import com.itko.lisa.vse.stateful.model.Request;&#13;&#10;//import com.itko.util.ParameterList;&#13;&#10;//&#13;&#10;//Request req =testExec.getStateValue(&quot;lisa.vse.request&quot;);&#13;&#10;//String operation = req.getOperation().toString();&#13;&#10;//testExec.setStateValue(&quot;op&quot;,operation);&#13;&#10;//&#13;&#10;//if(operation.equals(&quot;depositMoney&quot;))&#13;&#10;//{&#13;&#10;//ParameterList args = req.getArguments();&#13;&#10;//testExec.setStateValue(&quot;dep&quot;,args.get(&quot;amount&quot;).toDouble());&#13;&#10;//}&#13;&#10;//&#13;&#10;//if(operation.equals(&quot;withdrawMoney&quot;)or operation.equals(&quot;transferMoney&quot;) )&#13;&#10;//{&#13;&#10;//ParameterList args = req.getArguments();&#13;&#10;//testExec.setStateValue(&quot;with&quot;,args.get(&quot;amount&quot;).toDouble());&#13;&#10;//}&#13;&#10;&#13;&#10;String oper=testExec.getStateValue(&quot;op&quot;).toString();&#13;&#10;&#13;&#10;double b=Double.parseDouble(com.itko.lisa.vse.SharedModelMap.get(&quot;AccountBalance&quot;, &quot;balance&quot;));&#13;&#10;&#13;&#10;if(oper.equals(&quot;withdrawMoney&quot;))&#13;&#10;{&#13;&#10;double w=testExec.getStateValue(&quot;with&quot;);&#13;&#10;double b=b-w;&#13;&#10;testExec.setStateValue(&quot;bal&quot;,b.toString());&#13;&#10;com.itko.lisa.vse.SharedModelMap.put(&quot;AccountBalance&quot;, &quot;balance&quot;, b.toString());&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;if(op.equals(&quot;depositMoney&quot;))&#13;&#10;{&#13;&#10;&#13;&#10;double d=testExec.getStateValue(&quot;dep&quot;);&#13;&#10;double b=b+d;&#13;&#10;testExec.setStateValue(&quot;bal&quot;,b.toString());&#13;&#10;com.itko.lisa.vse.SharedModelMap.put(&quot;AccountBalance&quot;, &quot;balance&quot;, b.toString());&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;if( op.equals(&quot;withdrawMoney&quot;))&#13;&#10;&#13;&#10;{&#13;&#10;double w=testExec.getStateValue(&quot;with&quot;);&#13;&#10;&#13;&#10;double b=b-w;&#13;&#10;testExec.setStateValue(&quot;bal&quot;,b.toString());&#13;&#10;com.itko.lisa.vse.SharedModelMap.put(&quot;AccountBalance&quot;, &quot;balance&quot;, b.toString());&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;}</script>
    </Node>


    <Node name="VS Image Response Selection" log=""
          type="com.itko.lisa.vse.stateful.ConversationalStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</log>
<then>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If learning" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Learning, branching to Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</log>
<then>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>LEARNING</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If tracking" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Transaction Tracking, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>TRACK</executionMode>
</CheckResult>

<vsiSource>{{LISA_RELATIVE_PROJ_ROOT}}/VirtualServices/Images/sharemodal1.vsi</vsiSource>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<outputAsObject>true</outputAsObject>
<liveInvocationStep>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</liveInvocationStep>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Virtual HTTPS Responder" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpRespondStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="false" 
          next="Virtual HTTPS Listener 8031" > 

<responseList>lisa.vse.response</responseList>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpLiveInvocationStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If learning" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Learning, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>LEARNING</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>Live System Failure</onExceptionStep>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<vseLookupStep>VS Image Response Selection</vseLookupStep>
<targetServer>{{LIVE_INVOCATION_SERVER3}}</targetServer>
<targetPort>{{LIVE_INVOCATION_PORT2}}</targetPort>
<hostHeaderPassThrough>false</hostHeaderPassThrough>
<useSSLToServer>false</useSSLToServer>
<useSSL>false</useSSL>
    </Node>


    <Node name="Virtual Service Tracking" log=""
          type="com.itko.lisa.vse.stateful.VSTrackingStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 

<imageResponseProperty>lisa.vse.image.response</imageResponseProperty>
<liveResponseProperty>lisa.vse.live.response</liveResponseProperty>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Live System Failure" log=""
          type="com.itko.lisa.test.NoTransNode" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="abort" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If failover" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Failover, branching to VS Image Response Selection</log>
<then>VS Image Response Selection</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>FAILOVER</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If standing in" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Stand In, branching to Virtual HTTPS Responder</log>
<then>Virtual HTTPS Responder</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>STAND_IN</executionMode>
</CheckResult>

    </Node>


    <Node name="abort" log="The test was aborted"
          type="com.itko.lisa.test.AbortStep" 
          version="1" 
          uid="BEDA6E2D3A5411E89BE0205420524153" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          uid="BEDA6E2B3A5411E89BE0205420524153" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          uid="BEDA6E293A5411E89BE0205420524153" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


</VSModel>
