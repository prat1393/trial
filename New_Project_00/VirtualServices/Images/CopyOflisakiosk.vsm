<?xml version="1.0" ?>

<VSModel name="CopyOflisakiosk" version="5">

<meta>
   <create version="8.4.0" buildNumber="8.4.0.227" author="admin" date="03/06/2018" host="HVDIVD18MIS1939" />
   <lastEdited version="8.4.0" buildNumber="8.4.0.227" author="admin" date="04/12/2018" host="HVDIVD18MIS1939" />
</meta>

<id>92086B88212211E8AE6F688A20524153</id>
<IsInProject>true</IsInProject>
<sig>ZWQ9NSZ0Y3Y9NSZsaXNhdj04LjQuMCAoOC40LjAuMjI3KSZub2Rlcz0tMTQ2NjA3MTM3OQ==</sig>
<subprocess>false</subprocess>

<initState>
</initState>

<resultState>
</resultState>

<deletedProps>
</deletedProps>

    <Node name="Virtual HTTPS Listener 8031" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpListenStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual Service Execution Router" > 


      <!-- Filters -->
      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.scriptable.ScriptableDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<updateRequestScript><![CDATA[%groovy%


import com.itko.util.ParameterList;
import com.itko.lisa.vse.stateful.protocol.ws.WSSOAPProtocolHandler;
import com.itko.util.XMLUtils;

String decodedXML = (lisa_vse_request.getBodyAsString().replaceAll("&lt;","<")).replaceAll("&gt;",">");

lisa_vse_request.setBody( decodedXML  );

WSSOAPProtocolHandler wd=new WSSOAPProtocolHandler();

wd.updateRequest(lisa_vse_request);

]]></updateRequestScript>
</CustomFilterData>
      </Filter>


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If being efficient" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Most Efficient, branching to VS Image Response Selection</log>
<then>VS Image Response Selection</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>TRACK</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<listenPort>8031</listenPort>
<basePath>/</basePath>
<bindOnly>false</bindOnly>
<useSSL>false</useSSL>
<sslClientAuthType>none</sslClientAuthType>
    </Node>


    <Node name="Virtual Service Execution Router" log=""
          type="com.itko.lisa.vse.stateful.VSRouterStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="VS Image Response Selection" > 

<onerror>abort</onerror>
<script>// This script must return either an enum entry from ExecutionMode or&#13;&#10;// a string that is the name of an enum entry.  The DYNAMIC entry may&#13;&#10;// not be returned.  It will be executed for DYNAMIC execution mode&#13;&#10;// only.&#13;&#10;import com.itko.lisa.vse.ExecutionMode;&#13;&#10;&#13;&#10;return &#9;ExecutionMode.EFFICIENT;&#13;&#10;&#13;&#10;&#13;&#10;/* other values: &#13;&#10;&#9;ExecutionMode.TRACK;&#13;&#10;&#9;ExecutionMode.STAND_IN;&#13;&#10;&#9;ExecutionMode.LIVE;&#13;&#10;&#9;ExecutionMode.FAILOVER;&#13;&#10;&#9;ExecutionMode.VALIDATION;&#13;&#10;&#9;ExecutionMode.LEARNING;&#13;&#10;*/&#13;&#10;</script>
<supportedModes>
<mode>LIVE</mode>
<mode>STAND_IN</mode>
<mode>VALIDATION</mode>
<mode>LEARNING</mode>
<mode>TRACK</mode>
<mode>FAILOVER</mode>
<mode>EFFICIENT</mode>
<mode>DYNAMIC</mode>
</supportedModes>
<liveInvocationStep>Virtual HTTPS Live Invocation 28443</liveInvocationStep>
    </Node>


    <Node name="VS Image Response Selection" log=""
          type="com.itko.lisa.vse.stateful.ConversationalStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Execute script (JSR-223)" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</log>
<then>Virtual HTTPS Live Invocation 28443</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If learning" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Learning, branching to Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT2}}</log>
<then>Virtual HTTPS Live Invocation 28443</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>LEARNING</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If tracking" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Transaction Tracking, branching to Virtual Service Tracking</log>
<then>Virtual HTTPS Live Invocation 28443</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>TRACK</executionMode>
</CheckResult>

<vsiSource>{{LISA_RELATIVE_PROJ_ROOT}}/VirtualServices/Images/dtvnow.vsi</vsiSource>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<outputAsObject>true</outputAsObject>
<liveInvocationStep>Virtual HTTPS Live Invocation 28443</liveInvocationStep>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Execute script (JSR-223)" log=""
          type="com.itko.lisa.test.UserScriptNode" 
          version="1" 
          uid="6CD4FF6294911E8A2F9C66520524153" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="Virtual HTTPS Responder" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assertion name: Any Exception Then Fail checks for: true is of type: Assert on Invocation Exception.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Scripted Assertion~1" type="com.itko.lisa.test.AssertByScript">
<log>Assertion name: Scripted Assertion~1 checks for: true is of type: Assert by Script Execution.</log>
<then>Virtual HTTPS Live Invocation 28443</then>
<valueToAssertKey></valueToAssertKey>
        <script>// This script should return a boolean result indicating the assertion is true or false&#13;&#10;String abc= testExec.getStateValue(&quot;Match&quot;).toString();&#13;&#10;String e=&quot;true&quot;;&#13;&#10;&#13;&#10;if(abc.equalsIgnoreCase(&quot;exact&quot;)|| abc.equalsIgnoreCase(&quot;sig&quot;))&#13;&#10;{&#13;&#10;e=&quot;false&quot;;&#13;&#10;}&#13;&#10;retval=e;</script>
        <language>BeanShell</language>
        <copyprops>TestExecPropsAndSystemProps</copyprops>
</CheckResult>

<onerror>abort</onerror>
<language>BeanShell</language>
<copyProps>TestExecProps</copyProps>
<script>// This script should return a boolean result indicating the assertion is true or false&#13;&#10;import com.itko.lisa.vse.stateful.model.TransactionNode;&#13;&#10;import com.itko.lisa.vse.stateful.model.Transaction;&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;if ( testExec.getStateObject(&quot;lisa.vse.matched.transaction&quot;) instanceof com.itko.lisa.vse.stateful.model.TransactionNode) &#13;&#10;&#13;&#10;{    // the VSI selected a META response&#13;&#10;&#13;&#10;    _logger.info( &quot;The VSI selected a META txn response&quot; );&#13;&#10;&#13;&#10;&#13;&#10;  testExec.setStateObject(&quot;Match&quot;,&quot;sig&quot;);&#13;&#10;} &#13;&#10;&#13;&#10;else if ( testExec.getStateObject(&quot;lisa.vse.matched.transaction&quot;) instanceof com.itko.lisa.vse.stateful.model.Transaction)&#13;&#10;&#13;&#10;{  // the standard Service Image response as seen in the VSI contains HTML&#13;&#10;  _logger.info( &quot;The VSI selected a specific txn response&quot; );&#13;&#10;&#13;&#10;    match = &quot;Exact&quot;;&#13;&#10;&#13;&#10;  testExec.setStateObject(&quot;Match&quot;,&quot;exact&quot;);&#13;&#10;}&#13;&#10;&#13;&#10;else&#13;&#10;&#13;&#10;{  // The VSI selected a specific transaction&#13;&#10;&#13;&#10;    _logger.info( &quot;The VSI selected a Service Image Not Found response&quot; );&#13;&#10;&#13;&#10;   &#13;&#10;  testExec.setStateObject(&quot;Match&quot;,&quot;No&quot;);&#13;&#10;}&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;// if Scripted Assertion, return true and set the IF False, Fail the Test setting&#13;&#10;&#13;&#10;// this way if the script has an error it will fail, only success returns true&#13;&#10;&#13;&#10;&#13;&#10;// if JSR step, you could return a value for example &apos;match&apos;&#13;&#10;</script>
    </Node>


    <Node name="Virtual HTTPS Responder" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpRespondStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="false" 
          next="Virtual HTTPS Listener 8031" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Scripted Assertion" type="com.itko.lisa.test.AssertByScript">
<log>Assertion name: Scripted Assertion checks for: true is of type: Assert by Script Execution.</log>
<then>Virtual HTTPS Live Invocation 28443</then>
<valueToAssertKey></valueToAssertKey>
        <script>String abc= testExec.getStateValue(&quot;Match&quot;).toString();&#13;&#10;String e=&quot;true&quot;;&#13;&#10;&#13;&#10;if(abc.equalsIgnoreCase(&quot;exact&quot;)|| abc.equalsIgnoreCase(&quot;sig&quot;))&#13;&#10;{&#13;&#10;e=&quot;false&quot;;&#13;&#10;}&#13;&#10;retfal=e;</script>
        <language>Groovy</language>
        <copyprops>TestExecPropsAndSystemProps</copyprops>
</CheckResult>

<responseList>lisa.vse.response</responseList>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Virtual HTTPS Live Invocation 28443" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpLiveInvocationStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If learning" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Learning, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>LEARNING</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="if tracking" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log></log>
<then>Virtual Service Tracking</then>
        <executionMode>TRACK</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>Live System Failure</onExceptionStep>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<vseLookupStep>end</vseLookupStep>
<targetServer>csi-tst-q28.it.att.com</targetServer>
<targetPort>28443</targetPort>
<hostHeaderPassThrough>false</hostHeaderPassThrough>
<useSSLToServer>true</useSSLToServer>
<useSSL>true</useSSL>
<sslKeystoreFile>H:/Documents/cef_keystore</sslKeystoreFile>
<sslKeystorePWEnc>d2ff9c378928b9f3e4c8daf0487c9eaa</sslKeystorePWEnc>
    </Node>


    <Node name="Virtual Service Tracking" log=""
          type="com.itko.lisa.vse.stateful.VSTrackingStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 

<imageResponseProperty>lisa.vse.image.response</imageResponseProperty>
<liveResponseProperty>lisa.vse.live.response</liveResponseProperty>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Live System Failure" log=""
          type="com.itko.lisa.test.NoTransNode" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="abort" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If failover" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Failover, branching to VS Image Response Selection</log>
<then>VS Image Response Selection</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>FAILOVER</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If standing in" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Stand In, branching to Virtual HTTPS Responder</log>
<then>Virtual HTTPS Responder</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>STAND_IN</executionMode>
</CheckResult>

    </Node>


    <Node name="abort" log="The test was aborted"
          type="com.itko.lisa.test.AbortStep" 
          version="1" 
          uid="92086B8E212211E8AE6F688A20524153" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          uid="92086B8C212211E8AE6F688A20524153" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          uid="92086B8A212211E8AE6F688A20524153" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


</VSModel>
